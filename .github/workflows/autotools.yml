name: Build autotools

on:
  push:
    branches:
    - main
    paths:
    - "bazel/compile/**"
    - "bazel/deps.bzl"
    - "bazel/archives.bzl"
    - "bazel/versions.bzl"
    - ".github/workflows/autotools.yml"
  pull_request:
    paths:
    - "bazel/compile/**"
    - "bazel/deps.bzl"
    - "bazel/archives.bzl"
    - "bazel/versions.bzl"
    - ".github/workflows/autotools.yml"
  release:
    types:
      released

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - arch: x86_64
          runs-on: ubuntu-22.04
        - arch: aarch64
          runs-on: ubuntu-22.04-arm
    steps:
    - uses: actions/checkout@v5
    - name: Fetch versions
      id: deps
      run: |
        cd bazel
        bazel build //:deps.json
        VERSIONS=$(cat bazel-bin/deps.json)
        echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT
    - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.22
      id: m4_version
      name: M4 version
      with:
        input: ${{ steps.deps.outputs.versions }}
        options: -r
        filter: .m4_source.version
    - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.22
      id: autoconf_version
      name: Autoconf version
      with:
        input: ${{ steps.deps.outputs.versions }}
        options: -r
        filter: .autoconf_source.version
    - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.22
      id: automake_version
      name: Automake version
      with:
        input: ${{ steps.deps.outputs.versions }}
        options: -r
        filter: .automake_source.version
    - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.22
      id: libtool_version
      name: Libtool version
      with:
        input: ${{ steps.deps.outputs.versions }}
        options: -r
        filter: .libtool_source.version
    - name: Setup Bazel
      uses: bazelbuild/setup-bazelisk@v3
    - name: Install libtinfo
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install -y libtinfo5 libperl5.34

    - name: Build autotools for ${{ matrix.arch }}
      env:
        M4_VERSION: ${{ steps.m4_version.outputs.value }}
        AUTOCONF_VERSION: ${{ steps.autoconf_version.outputs.value }}
        AUTOMAKE_VERSION: ${{ steps.automake_version.outputs.value }}
        LIBTOOL_VERSION: ${{ steps.libtool_version.outputs.value }}
      run: |
        echo "M4 VERSION: ${M4_VERSION}"
        echo "AUTOCONF VERSION: ${AUTOCONF_VERSION}"
        echo "AUTOMAKE VERSION: ${AUTOMAKE_VERSION}"
        echo "LIBTOOL VERSION: ${LIBTOOL_VERSION}"
        cd bazel
        bazel build //compile:autotools || {
            config_log=$(find ${HOME}/.cache/bazel -name "config.log" -path "*/compile/auto*.build_tmpdir/*" 2>/dev/null | head -1)
            if [[ -n "$config_log" ]]; then
                echo "=== CONFIG.LOG ==="
                cat "$config_log"
                echo "=================="
            else
                echo "NO CONFIG.LOG FOUND!!!"
            fi
            if [[ -e "/tmp/debug" ]]; then
                cat /tmp/debug

            else
                echo "NO DEBUG FOUND!!!"
            fi
            exit 1
        }
        FULL_VERSION="${M4_VERSION}-${AUTOCONF_VERSION}-${AUTOMAKE_VERSION}-${LIBTOOL_VERSION}"
        cp bazel-bin/compile/autotools-${FULL_VERSION}.tar.xz \
           bazel-bin/compile/autotools-${FULL_VERSION}-${{ matrix.arch }}.tar.xz
    - name: Upload autotools ${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: >-
          autotools-${{
            steps.m4_version.outputs.value
          }}-${{
            steps.autoconf_version.outputs.value
          }}-${{
            steps.automake_version.outputs.value
          }}-${{
            steps.libtool_version.outputs.value
          }}-${{ matrix.arch }}
        path: >-
          bazel/bazel-bin/compile/autotools-${{
            steps.m4_version.outputs.value
          }}-${{
            steps.autoconf_version.outputs.value
          }}-${{
            steps.automake_version.outputs.value
          }}-${{
            steps.libtool_version.outputs.value
          }}-${{
            matrix.arch
          }}.tar.xz
        retention-days: 30

  publish:
    if: github.event_name == 'release' && startsWith(github.event.release.name, 'bazel-bins')
    runs-on: ubuntu-24.04
    needs:
    - build
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v5
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Upload release assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for artifact in artifacts/*; do
            [[ ! -d "$artifact" ]] && continue
            name=$(basename "$artifact")
            file=$(ls "$artifact"/*.tar.xz)
            echo "Uploading $file as $name.tar.xz"
            gh release upload "${{ github.event.release.tag_name }}" \
                "$file#$name.tar.xz" \
                --clobber
        done
