
inputs:
  data:
    type: string
    required: true
  repository:
    type: string
    default: ${{ github.repository }}
  template-script-current:
    type: string
    default: |
      # Find current check (\($name)) for run attempt (\($attempt))
      OUTPUT=\"$(gh api repos/\($repo)/commits/\($head_sha)/check-runs?check_name=\($name)&filter=latest)\"
  template-script-update:
    type: string
    default: |
      # Update check (\($name))
      CHECK=\($check)
      OUTPUT=\"$(echo $CHECK | gh api -XPATCH --input - repos/\($repo)/check-runs/\($id))\"
  token:
    type: string
    default: ${{ github.token }}

outputs:
  checks:
    value: ${{ steps.checks.outputs.value }}


runs:
  using: composite
  steps:
  # Find the current check and reuse its text
  - uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.11
    name: Find check
    id: current-check
    with:
      input: ${{ inputs.data }}
      filter: |
        ${{ github.run_attempt }} as $attempt
        | "${{ inputs.repository }}" as $repo
        | .name as $name
        | .head_sha as $head_sha
        | ("${{ inputs.template-script-current }}" | bash::output)
    env:
      GH_TOKEN: ${{ inputs.token }}

  - name: Progress status check
    uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.11
    with:
      input: |
        data: ${{ inputs.data }}
        current: ${{ steps.current-check.outputs.output }}
      filter: |
        .data as $data
        | .current as $current
        | $current.check_runs[0].output.text
        | split("### Check started by")[1]
        | "
        \($data.output.text)

        ### Check started by\(.)" as $text
        | $data
        | .name as $name
        | "${{ inputs.repository }}" as $repo
        | .id = $current.check_runs[0].id
        | .id as $id
        | .output.text = $text
        | tojson
        | @sh as $check
        | ("${{ inputs.template-script-update }}" | bash::output)
    env:
      GH_TOKEN: ${{ inputs.token }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.11
    name: Print check response
    id: checks
    with:
      input: ${{ steps.progress.outputs.output }}
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
