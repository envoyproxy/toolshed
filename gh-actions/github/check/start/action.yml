
inputs:
  checks:
    type: string
    required: true
  repository:
    type: string
  app-id:
    type: string
  app-key:
    type: string
  token:
    type: string


outputs:
  checks:
    value: ${{ steps.checks.outputs.value }}

runs:
  using: composite
  steps:
  - name: Print checks
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.81
    if: ${{ fromJSON(env.CI_DEBUG || 'false') || fromJSON(env.RUNNER_DEBUG || 'false') }}
    with:
      input: ${{ inputs.checks }}
      input-format: text
      options: -C
      print-result: true
  - uses: envoyproxy/toolshed/gh-actions/appauth@actions-v0.1.81
    name: App auth
    if: ${{ inputs.app-id && inputs.app-key }}
    id: appauth
    with:
      app_id: ${{ inputs.app-id }}
      key: ${{ inputs.app-key }}
  - name: Start checks
    id: start-checks
    shell: bash
    run: |
      # Start checks
      while IFS=$\n read -r check; do
          INPUT=$(echo "$check" | jq -c 'del(.id)')
          CHECK_ID=$(echo "$check" | jq -r '.id')

          if [[ -z "$INPUT" || -z "$CHECK_ID" ]]; then
              continue
          fi
          CHECK_RUN_ID=$(printf '%s' "$INPUT" | gh api -XPOST --input - --jq '.id' repos/${{ inputs.repository || github.repository }}/check-runs)
          echo "${CHECK_ID}=${CHECK_RUN_ID}" >> $GITHUB_OUTPUT
      done <<< "$CHECKS"
    env:
      GH_TOKEN: ${{ steps.appauth.outputs.token || inputs.token }}
      CHECKS: ${{ inputs.checks }}

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.81
    name: Started
    id: started
    with:
      input: ${{ toJSON(steps.start-checks.outputs) }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.81
    name: Checks
    id: checks
    with:
      options: -sc
      input: ${{ inputs.checks }}
      input-format: json-slurp
      filter: |
        (reduce .[] as $item ({}; . + {($item.id): $item.conclusion})
        | to_entries
        | map(select(.value))
        | from_entries)
        as $skipped
        | ${{ steps.started.outputs.value }} * $skipped
