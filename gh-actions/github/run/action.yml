inputs:
  command:
    type: string
    required: true
  args:
    type: string
  container-command:
    type: string
    default:
  catch-errors:
    type: boolean
    default: false
  diskspace-hack:
    type: boolean
    default: false
  diskspace-hack-paths:
    type: string
    default:
  error-match:
    type: string
    default: |
      ERROR
      error:
      Error:
  notice-match:
    type: string
    default: |
      NOTICE
  report-pre:
    type: string
    default: |
      - run: |
          echo "disk space at beginning of build:"
          df -h
        shell: bash
  report-post:
    type: string
    default: |
      - run: |
          echo "disk space at end of build:"
          df -h
        shell: bash
  summary-post:
    type: string
    default:
  steps-pre:
    type: string
    default:
  steps-pre-name:
    type: string
    default:
  steps-post:
    type: string
    default:
  steps-post-name:
    type: string
    default:
  upload-name:
    type: string
    default:
  upload-path:
    type: string
    default:
  warning-match:
    type: string
    default: |
      WARNING
      warning:
      Warning:
  working-directory:
    type: string
    default: .

  context:
    type: string

  source:
    type: string


runs:
  using: composite
  steps:
  - if: ${{ fromJSON(inputs.diskspace-hack) }}
    name: Free diskspace
    uses: envoyproxy/toolshed/gh-actions/diskspace@actions-v0.1.40
    with:
      to_remove: ${{ inputs.diskskpack-hack-paths }}
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.1.40
    name: Pre report
    if: ${{ inputs.report-pre }}
    with:
      steps: ${{ inputs.report-pre }}
      context: ${{ inputs.context }}
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.1.40
    name: Run pre steps
    if: ${{ inputs.steps-pre }}
    with:
      name: ${{ inputs.steps-pre-name }}
      steps: ${{ inputs.steps-pre }}
      context: ${{ inputs.context }}
  - run: |
      if [[ "${#INPUT_ENV}" -ne 0 ]]; then
          SOURCETMP="$(mktemp)"
          # TODO(phlax): Fix escaping
          printf "%s" '${{ inputs.source }}' > "$SOURCETMP"
      fi
      echo "file=${SOURCETMP}" >> $GITHUB_OUTPUT
    if: ${{ inputs.source }}
    id: source
    env:
      INPUT_ENV: ${{ inputs.source }}
    shell: bash

  - run: |
      COMMAND=()
      read -ra ARGS <<< "${{ inputs.args }}"
      ACTUAL_COMMAND=(
          ${{ inputs.command }}
          ${ARGS[@]})
      # allow mangling of command in presteps
      if [[ "${#CONTAINER_COMMAND}" -ne 0 ]]; then
          COMMAND+=(${CONTAINER_COMMAND})
      else
          COMMAND+=(${{ inputs.container-command }})
      fi
      COMMAND+=("${ACTUAL_COMMAND[@]}")
      echo "command=${COMMAND[*]}" >> $GITHUB_OUTPUT
    id: command
    shell: bash

  - run: |
      echo "DEBUG: RUN ${COMMAND}" >&2
      if [[ -e "$SOURCETMP" ]]; then
          cat $SOURCETMP
      fi
    if: ${{ env.CI_DEBUG || env.RUNNER_DEBUG }}
    env:
      COMMAND: ${{ steps.command.outputs.command }}
      SOURCETMP: ${{ steps.source.outputs.file }}
    shell: bash

  - uses: envoyproxy/toolshed/gh-actions/date@14c6c17be9e07f3c88eda15c946cb64260ca56f6
    id: started

  - run: |
      cd $TARGET_PATH
      if [[ -n "${SOURCETMP}" ]]; then
          . "$SOURCETMP"
          rm -rf "$SOURCETMP"
      fi
      TMP_STDERR=$(mktemp)
      echo "stderr-path=${TMP_STDERR}" >> $GITHUB_OUTPUT
      TMP_STDOUT=$(mktemp)
      echo "stdout-path=${TMP_STDOUT}" >> $GITHUB_OUTPUT
      read -ra COMMAND_PARTS <<< "$COMMAND"
      EXIT_CODE=0
      "${COMMAND_PARTS[@]}" > "$TMP_STDOUT" 2> >(tee "$TMP_STDERR") || {
          EXIT_CODE=$?
      }
      echo "exit-code=${EXIT_CODE}" >> $GITHUB_OUTPUT
    shell: bash
    id: run
    env:
      COMMAND: ${{ steps.command.outputs.command }}
      SOURCETMP: ${{ steps.source.outputs.file }}
      TARGET_PATH: ${{ inputs.working-directory }}
  - uses: envoyproxy/toolshed/gh-actions/date@14c6c17be9e07f3c88eda15c946cb64260ca56f6
    id: completed

  - run: |
      STDERR="$(cat "$TMP_STDERR")"
      bubble_messages () {
          local message_type="$1" \
                matcher="$2" \
                matches=()
          matcher=${matcher%"${matcher##*[![:space:]]}"}
          while IFS=$'\n' read -r line; do
              matches+=("$line")
          done <<< "$matcher"
          declare -a issued_warnings
          for match in "${matches[@]}"; do
              matched="$(echo "${STDERR}" | grep "$match" || :)"
              if [[ -z "$matched" ]]; then
                  continue
              fi
              while read -r message; do
                  found=0
                  for issued in "${issued_warnings[@]}"; do
                      if [[ "$issued" == "$message" ]]; then
                          found=1
                          break
                      fi
                  done
                  if [[ $found -ne 0 ]]; then
                      continue
                  fi
                  issued_warnings+=("$message")
                  echo "::${message_type}::${message}"
              done < <(echo "$matched" | grep -o ".*" || :)
          done
      }
      bubble_messages error "${{ inputs.error-match }}"
      bubble_messages warning "${{ inputs.warning-match }}"
      bubble_messages notice "${{ inputs.notice-match }}"
    shell: bash
    env:
      TMP_STDERR: ${{ steps.run.outputs.stderr-path }}

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.40
    name: Generate run context
    id: context
    with:
      input: ${{ toJSON(steps.run.outputs) }}
      filter: >-
        . + {"started": ${{ steps.started.outputs.timestamp }},
             "completed": ${{ steps.completed.outputs.timestamp }}}
        | {"run": .,
           "context": ${{ inputs.context }}}

  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.1.40
    name: Run post steps
    if: ${{ inputs.steps-post }}
    with:
      name: ${{ inputs.steps-post-name }}
      steps: ${{ inputs.steps-post }}
      context: ${{ steps.context.outputs.value }}
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.1.40
    name: Post report
    if: ${{ inputs.report-post }}
    with:
      steps: ${{ inputs.report-post }}
      context: ${{ steps.context.outputs.value }}
  - uses: actions/upload-artifact@v3
    name: Upload artefacts
    if: ${{ inputs.upload-name && inputs.upload-path }}
    with:
      name: ${{ inputs.upload-name }}
      path: ${{ inputs.upload-path }}
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.1.40
    name: Job summary
    if: ${{ inputs.summary-post }}
    with:
      steps: ${{ inputs.summary-post }}
      context: ${{ steps.context.outputs.value }}
  - run: |
      rm -rf "$TMP_STDOUT"
      rm -rf "$TMP_STDERR"
      exit ${EXIT_CODE}
    shell: bash
    env:
      EXIT_CODE: ${{ !fromJSON(inputs.catch-errors) && steps.run.outputs.exit-code || 0 }}
      TMP_STDERR: ${{ steps.run.outputs.stderr-path }}
      TMP_STDOUT: ${{ steps.run.outputs.stdout-path }}
