
inputs:
  command:
    type: string
    required: true
  command-prefix:
    type: string
    default:
  container-command:
    type: string
    default:
  catch-errors:
    type: boolean
    default: false
  error-match:
    type: string
    default: ERROR
  warn-on-error:
    type: boolean
    default: false

  env:
    type: string


runs:
  using: composite
  steps:
  - id: set_env
    name: 'Set CI env ${{ inputs.target }}'
    run: |
      if [[ "${#INPUT_ENV}" -ne 0 ]]; then
          SOURCETMP="$(mktemp)"
          # TODO(phlax): Fix escaping
          echo "${{ inputs.env }}" > "$SOURCETMP"
          . "$SOURCETMP"
          rm -rf "$SOURCETMP"
      fi
    shell: bash
    env:
      INPUT_ENV: ${{ inputs.env }}
  - run: |
      COMMAND=()
      if [[ -n "${{ inputs.container-command }}" ]]; then
          COMMAND+=(${{ inputs.container-command }})
      fi
      if [[ -n "${{ inputs.container-command }}" && -n "${{ inputs.command-prefix }}" ]]; then
          COMMAND+=('${{ inputs.command-prefix }} ${{ inputs.command }}')
      else
          COMMAND+=(
              ${{ inputs.command-prefix }}
              ${{ inputs.command }})
      fi
      TMP_OUTPUT=$(mktemp)
      "${COMMAND[@]}" 2> >(tee "$TMP_OUTPUT") || {
          OUTPUT="$(grep ${{ inputs.error-match }} "$TMP_OUTPUT" | tail -n 1)"
          rm -rf "$TMP_OUTPUT"
          echo "${OUTPUT_PREFIX} ${OUTPUT}"
          if [[ "${{ inputs.catch-errors }}" != "true" && "${{ inputs.warn-on-error }}" != "true" ]]; then
              exit 1
          fi
      }
      rm -rf "$TMP_OUTPUT"
    shell: bash
    env:
      OUTPUT_PREFIX: ${{ inputs.warn-on-error == 'true' && '::warn::' || '::error::' }}
