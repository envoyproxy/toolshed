inputs:
  args:
    type: string
  command:
    type: string
    required: true
  container-command:
    type: string
    default:
  container-output:
    type: string
    default:
  context:
    type: string
  catch-errors:
    type: boolean
    default: false
  diskspace-hack:
    type: boolean
    default: false
  diskspace-hack-paths:
    type: string
    default:
  downloads:
    type: string
    default:
  entrypoint:
    type: string
    default:
  error-match:
    type: string
    default: |
      ERROR
      error:
      Error:
  fail-match:
    type: string
  notice-match:
    type: string
    default: |
      NOTICE
  output-path:
    type: string
    default:
  report-pre:
    type: string
    default: |
      - run: |
          echo "disk space at beginning of build:"
          df -h
        shell: bash
  report-post:
    type: string
    default: |
      - run: |
          echo "disk space at end of build:"
          df -h
        shell: bash
  source:
    type: string
  summary-post:
    type: string
    default:
  steps-pre:
    type: string
    default:
  steps-pre-name:
    type: string
    default:
  steps-post:
    type: string
    default:
  steps-post-name:
    type: string
    default:
  upload-name:
    type: string
    default:
  upload-path:
    type: string
    default:
  warning-match:
    type: string
    default: |
      WARNING
      warning:
      Warning:
  working-directory:
    type: string
    default: .

outputs:
  command:
    value: ${{ steps.command.outputs.actual }}
  completed:
    value: ${{ steps.completed.outputs.value }}
  container-command:
    value: ${{ steps.command.outputs.container-command }}
  exit-code:
    value: ${{ steps.run.outputs.exit-code }}
  output-dir:
    value: ${{ steps.paths.outputs.output }}
  started:
    value: ${{ steps.started.outputs.value }}


runs:
  using: composite
  steps:
  - if: ${{ fromJSON(inputs.diskspace-hack) }}
    name: Free diskspace
    uses: envoyproxy/toolshed/gh-actions/diskspace@actions-v0.2.31
    with:
      to_remove: ${{ inputs.diskspace-hack-paths }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    name: Generate download config
    if: ${{ inputs.downloads }}
    id: download-config
    with:
      input: ${{ inputs.downloads }}
      input-format: yaml
  - uses: envoyproxy/toolshed/gh-actions/foreach@actions-v0.2.31
    if: ${{ steps.download-config.outputs.value }}
    with:
      items: ${{ steps.download-config.outputs.value }}
      steps: |
        - uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427  # v4.1.4
          with:
            name: $KEY
            path: >-
              %{{ fromJSON(inputs.context).items['$KEY'] }}

  - run: |
      # Create temporary files
      if [[ "${#SOURCE_DATA}" -ne 0 ]]; then
          SOURCETMP="$(mktemp)"
          echo "TMP_SOURCE=${SOURCETMP}" >> $GITHUB_ENV
          echo "source=${SOURCETMP}" >> $GITHUB_OUTPUT
      fi
      if [[ "${#ENTRYPOINT_DATA}" -ne 0 ]]; then
          ENTRYPOINT="$(mktemp)"
          chmod +x $ENTRYPOINT
          echo "TMP_ENTRYPOINT=${ENTRYPOINT}" >> $GITHUB_ENV
          echo "entrypoint=${ENTRYPOINT}" >> $GITHUB_OUTPUT
      fi
      if [[ "${#OUTPUT_DATA}" -ne 0 ]]; then
          mkdir "$OUTPUT_DATA"
      fi
      TMP_STDERR=$(mktemp)
      echo "TMP_STDERR=$TMP_STDERR" >> $GITHUB_ENV
      echo "stderr=${TMP_STDERR}" >> $GITHUB_OUTPUT
      TMP_STDOUT=$(mktemp)
      echo "TMP_STDOUT=$TMP_STDOUT" >> $GITHUB_ENV
      echo "stdout=${TMP_STDOUT}" >> $GITHUB_OUTPUT
    id: paths
    env:
      ENTRYPOINT_DATA: ${{ inputs.entrypoint }}
      SOURCE_DATA: ${{ inputs.source }}
      OUTPUT_DATA: ${{ inputs.output-path }}
    shell: bash

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    id: entrypoint
    with:
      input: |
        ${{ inputs.entrypoint }}
      input-format: string
      options: -Rsr
      output-path: ${{ steps.paths.outputs.entrypoint }}
      print-output: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    id: source
    with:
      input: |
        ${{ inputs.source }}
      input-format: string
      options: -Rsr
      output-path: ${{ steps.paths.outputs.source }}
      print-output: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    name: Generate run context (steps-pre)
    id: context-steps-pre
    with:
      input: ${{ inputs.steps-pre || '""' }}
      options: -Rs
      input-format: string
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    name: Generate run context (steps-post)
    id: context-steps-post
    with:
      input: ${{ inputs.steps-post || '""' }}
      options: -Rs
      input-format: string
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.2.31
    name: Pre report
    if: ${{ inputs.report-pre }}
    with:
      steps: ${{ inputs.report-pre }}
      context: ${{ inputs.context }}
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.2.31
    name: Run pre steps
    if: ${{ inputs.steps-pre }}
    with:
      name: ${{ inputs.steps-pre-name }}
      steps: ${{ inputs.steps-pre }}
      context: ${{ inputs.context }}

  - run: |
      # Put the command and args together
      COMMAND=()
      read -ra ARGS <<< "${{ inputs.args }}"
      ACTUAL_COMMAND=(
          ${{ inputs.command }}
          ${ARGS[@]})
      CONTAINER_COMMAND="${CONTAINER_COMMAND:-${{ inputs.container-command }}}"
      CONTAINER_COMMAND="$(echo $CONTAINER_COMMAND | envsubst)"
      read -ra ACTUAL_CONTAINER_COMMAND <<< "${CONTAINER_COMMAND}"
      COMMAND+=("${ACTUAL_CONTAINER_COMMAND[@]}")
      COMMAND+=("${ACTUAL_COMMAND[@]}")
      echo "container=${ACTUAL_CONTAINER_COMMAND[*]}" >> $GITHUB_OUTPUT
      echo "CONTAINER_COMMAND=${ACTUAL_CONTAINER_COMMAND[*]}" >> $GITHUB_ENV
      ACTUAL_COMMAND="$(echo "${ACTUAL_COMMAND[*]}" | envsubst)"
      echo "actual=${ACTUAL_COMMAND}" >> $GITHUB_OUTPUT
      echo "command=${COMMAND[*]}" >> $GITHUB_OUTPUT
    id: command
    shell: bash

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    if: ${{ always() }}
    id: started
    with:
      options: -r
      filter: now
  - run: |
      # Run the command
      onerror () {
          EXIT_CODE="$?"
          if [[ -z "$SOURCED" ]]; then
              echo "Sourcing (${TMP_SOURCE}) failed with ${EXIT_CODE}" >&2
              cat "$TMP_SOURCE" >&2
              echo "exit-code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          fi
          exit 0
      }
      trap onerror EXIT
      cd $TARGET_PATH
      if [[ -n "${TMP_SOURCE}" ]]; then
          . "$TMP_SOURCE"
      fi
      SOURCED=1
      read -ra COMMAND_PARTS <<< "$COMMAND"
      EXIT_CODE=0
      "${COMMAND_PARTS[@]}" > >(tee "$TMP_STDOUT") 2> >(tee "$TMP_STDERR") || {
          EXIT_CODE=$?
      }
      echo "exit-code=${EXIT_CODE}" >> $GITHUB_OUTPUT
    shell: bash
    id: run
    env:
      COMMAND: ${{ steps.command.outputs.command }}
      TARGET_PATH: ${{ inputs.working-directory }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    id: cancelled
    if: ${{ cancelled() }}
    with:
      options: -r
      filter: |
        true
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    if: ${{ always() }}
    id: completed
    with:
      options: -r
      filter: now

  - uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.31
    if: ${{ ! (cancelled() || fromJSON(steps.cancelled.outputs.value || 'false')) }}
    with:
      input-format: string-path
      input: ${{ steps.paths.outputs.stderr }}
      options: -sRr
      filter: |
        . as $lines
        | ("${{ inputs.error-match }}" | split("\n") | map(select(test("^\\s*$") | not))) as $error_match
        | ("${{ inputs.fail-match }}" | split("\n") | map(select(test("^\\s*$") | not))) as $fail_match
        | ("${{ inputs.warning-match }}" | split("\n") | map(select(test("^\\s*$") | not))) as $warning_match
        | ("${{ inputs.notice-match }}" | split("\n") | map(select(test("^\\s*$") | not))) as $notice_match
        | $lines
        | github::log_bubble(
            {warning: $warning_match,
             notice: $notice_match,
             error: $error_match,
             fail: $fail_match})

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    name: Generate run context
    id: context
    if: ${{ always() }}
    with:
      input: ${{ toJSON(steps) }}
      filter: >-
        .run.outputs * {
          "started": (.started.outputs.value | fromjson),
          "cancelled": (.cancelled.outputs.value // "false" | fromjson),
          "container-command": .command.outputs.container,
          "command": .command.outputs.actual,
          "completed": (.completed.outputs.value | fromjson),
          "entrypoint": (.entrypoint.outputs.value | if str::isempty then "" else . end),
          "source": (.source.outputs.value | if str::isempty then "" else . end),
          "steps-pre": (.["context-steps-pre"].outputs.value // "\"\"" | fromjson | if str::isempty then "" else . end),
          "steps-post": (.["context-steps-post"].outputs.value // "\"\"" | fromjson | if str::isempty then "" else . end),
          "exit-code": (.run.outputs["exit-code"] // "0" | fromjson)}
        | {"run": .,
           "context": ${{ inputs.context || '{}' }}}

  - uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.31
    if: ${{ inputs.container-output && ( ! (cancelled() || fromJSON(steps.cancelled.outputs.value || 'false'))) }}
    with:
      input: |
        __output_dir: ${{ inputs.output-path }}
        ${{ inputs.container-output }}
      filter: |
        .__output_dir as $dir
        | del(.__output_dir)
        | to_entries
        | map(.value as $v
              | .key as $k
              | "\($dir)/\($v)"
              | if $v | endswith("/") then
                  "\(.)PLACEHOLDER"
                else . end
              | . as $dir_target
              | "\($dir)/\($v)" as $target
              | "mkdir -p $(dirname \($dir_target))\n\(env.CONTAINER_COMMAND) cp -a \($k) \($target)")
        | join("\n")
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.2.31
    name: Run post steps
    if: ${{ inputs.steps-post && ! (fromJSON(steps.context.outputs.value).run.cancelled || cancelled()) }}
    with:
      name: ${{ inputs.steps-post-name }}
      steps: ${{ inputs.steps-post }}
      context: ${{ steps.context.outputs.value }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    id: post-failed
    if: ${{ failure() && inputs.upload-name && inputs.upload-path }}
    with:
      input: ${{ steps.context.outputs.value }}
      filter: |
        .run["post-steps-failed"] = true
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.2.31
    name: Post report
    if: ${{ inputs.report-post && ! (fromJSON(steps.context.outputs.value).run.cancelled || cancelled()) }}
    with:
      steps: ${{ inputs.report-post }}
      context: ${{ steps.context.outputs.value }}
  - uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a  # v4.3.6
    name: Upload artefacts
    if: ${{ inputs.upload-name && inputs.upload-path && ! (fromJSON(steps.context.outputs.value).run.cancelled || cancelled()) }}
    with:
      name: ${{ inputs.upload-name }}
      path: ${{ inputs.upload-path }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    id: upload-failed
    if: ${{ failure() && inputs.upload-name && inputs.upload-path }}
    with:
      input: ${{ steps.post-failed.outputs.value || steps.context.outputs.value }}
      filter: |
        .run["upload-failed"] = true
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.31
    id: run-cancelled
    if: ${{ cancelled() }}
    with:
      input: ${{ steps.post-failed.outputs.value || steps.context.outputs.value }}
      filter: |
        .run["cancelled"] = true
  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.2.31
    name: Job summary
    if: ${{ always() && inputs.summary-post }}
    with:
      steps: ${{ inputs.summary-post }}
      context: ${{ steps.upload-failed.outputs.value || steps.post-failed.outputs.value || steps.context.outputs.value }}
  - run: |
      rm -rf "$TMP_STDOUT"
      rm -rf "$TMP_STDERR"
      if [[ -n "$TMP_ENTRYPOINT" && -e "$TMP_ENTRYPOINT" ]]; then
          rm -rf "$TMP_ENTRYPOINT"
      fi
      if [[ -n "$TMP_SOURCE" && -e "$TMP_SOURCE" ]]; then
          rm -rf "$TMP_SOURCE"
      fi
      if [[ -n "${CANCELLED}" ]]; then
          echo "Run cancelled" >&2
          exit 0
      elif [[ "${EXIT_CODE}" -ne 0 ]]; then
          echo "Run failed" >&2
          exit ${EXIT_CODE}
      elif [[ -n "${STEPS_POST_ERR}" ]]; then
          echo "Post steps failed" >&2
          echo "::error::Post steps failed" >&2
          exit 1
      elif [[ -n "${UPLOAD_ERR}" ]]; then
          echo "Upload failed" >&2
          echo "::error::Upload failed" >&2
          exit 1
      fi
      exit ${EXIT_CODE}
    shell: bash
    if: ${{ always() }}
    env:
      EXIT_CODE: ${{ !fromJSON(inputs.catch-errors) && steps.run.outputs.exit-code || 0 }}
      CANCELLED: ${{ steps.cancelled.outputs.value != '' && true || '' }}
      STEPS_POST_ERR: ${{ steps.post-failed.outputs.value != '' && true || '' }}
      UPLOAD_ERR: ${{ steps.upload-failed.outputs.value != '' && true || '' }}
