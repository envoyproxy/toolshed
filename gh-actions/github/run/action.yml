
inputs:
  command:
    type: string
    required: true
  command-prefix:
    type: string
    default:
  container-command:
    type: string
    default:
  catch-errors:
    type: boolean
    default: false
  error-match:
    type: string
    default: |
      ERROR
  notice-match:
    type: string
    default: |
      NOTICE
  warning-match:
    type: string
    default: |
      WARNING

  source:
    type: string


runs:
  using: composite
  steps:
  - run: |
      if [[ "${#INPUT_ENV}" -ne 0 ]]; then
          SOURCETMP="$(mktemp)"
          # TODO(phlax): Fix escaping
          printf "%s" '${{ inputs.source }}' > "$SOURCETMP"
          . "$SOURCETMP"
          rm -rf "$SOURCETMP"
      fi
      COMMAND=()
      if [[ -n "${{ inputs.container-command }}" ]]; then
          COMMAND+=(${{ inputs.container-command }})
      fi
      if [[ -n "${{ inputs.container-command }}" && -n "${{ inputs.command-prefix }}" ]]; then
          COMMAND+=('${{ inputs.command-prefix }} ${{ inputs.command }}')
      else
          COMMAND+=(
              ${{ inputs.command-prefix }}
              ${{ inputs.command }})
      fi
      TMP_OUTPUT=$(mktemp)
      "${COMMAND[@]}" 2> >(tee "$TMP_OUTPUT") || {
          FAILED=true
      }
      OUTPUT="$(cat "$TMP_OUTPUT")"
      rm -rf "$TMP_OUTPUT"

      bubble_messages () {
          local message_type="$1" \
                matcher="$2" \
                matches=()
          matcher=${matcher%"${matcher##*[![:space:]]}"}
          while IFS=$'\n' read -r line; do
              matches+=("$line")
          done <<< "$matcher"
          for match in "${matches[@]}"; do
              matched="$(echo "$OUTPUT" | grep "$match" || :)"
              if [[ -z "$matched" ]]; then
                  continue
              fi
              while read -r message; do
                  echo "::${message_type}::${message}"
              done < <(echo "$matched" | grep -o ".*" || :)
          done
      }
      bubble_messages error "${{ inputs.error-match }}"
      bubble_messages warning "${{ inputs.warning-match }}"
      bubble_messages notice "${{ inputs.notice-match }}"
      if [[ -n "$FAILED" && "${{ inputs.catch-errors }}" != "true" ]]; then
          exit 1
      fi
    shell: bash
    env:
      INPUT_ENV: ${{ inputs.source }}
