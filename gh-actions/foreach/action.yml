
inputs:
  context:
    type: string
    required: true
  context-filter:
    type: string
    default: .
  items:
    type: string
    required: true
  name:
    type: string
    default:
  secret:
    type: string
    required: true
  steps:
    type: string
    required: true

outputs:
  out:
    value: ${{ steps.steps.outputs.steps }}

runs:
  using: composite
  steps:
  - uses: envoyproxy/toolshed/gh-actions/jq@e0f55edab5d5eca4c2e4547d374f32cb7cf7b341  # actions-v0.2.25
    name: Context
    id: context
    with:
      input: ${{ inputs.context || '{}' }}
      filter: |
        ${{ inputs.context-filter }}
        | . * {"items": ${{ inputs.items }}}
  - uses: envoyproxy/toolshed/gh-actions/jq@e0f55edab5d5eca4c2e4547d374f32cb7cf7b341  # actions-v0.2.25
    name: Steps (JSON)
    id: steps-json
    with:
      input: ${{ inputs.steps }}
      input-format: yaml
  - uses: envoyproxy/toolshed/gh-actions/jq@e0f55edab5d5eca4c2e4547d374f32cb7cf7b341  # actions-v0.2.25
    name: Steps
    id: steps-subs
    with:
      input: ${{ steps.steps-json.outputs.value }}
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
      filter: |
        . as $steps
        | ${{ steps.context.outputs.value }}
        | .items as $items
        | [] as $out
        | $items
        | to_entries
        | map(.key as $k | $out | . + [($steps | walk(if type == "string" then sub("\\$KEY"; "\($k)") else . end))])
        | flatten

  - uses: envoyproxy/toolshed/gh-actions/using/steps@e0f55edab5d5eca4c2e4547d374f32cb7cf7b341  # actions-v0.2.25
    id: steps
    with:
      name: ${{ inputs.name }}
      steps: ${{ steps.steps-subs.outputs.value }}
      context: ${{ steps.context.outputs.value }}
      secret: ${{ inputs.secret }}
      step-format: json
