
inputs:
  items:
    type: string
    required: true
  steps:
    type: string
    required: true

outputs:
  out:
    value: ${{ steps.steps.outputs.value }}

runs:
  using: composite
  steps:
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.42
    name: Items
    id: items
    with:
      input: ${{ inputs.items }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.42
    name: Steps (JSON)
    id: steps-json
    with:
      input: ${{ inputs.steps }}
      input-format: yaml
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.42
    name: Steps
    id: steps-subs
    with:
      input: ${{ steps.steps-json.outputs.value }}
      filter: |
        ${{ steps.items.outputs.value }} as $items
        | . as $steps
        | [] as $out
        | $items
        | to_entries
        | map(.key as $k | $out | . + [($steps | walk(if type == "string" then sub("\\$KEY"; "\($k)") else . end))])
        | flatten

  - uses: envoyproxy/toolshed/gh-actions/using/steps@actions-v0.1.42
    id: steps-run
    with:
      steps: ${{ steps.steps-subs.outputs.value }}
      context: ${{ steps.items.outputs.value }}
      step-format: json

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.42
    id: steps
    with:
      input: ${{ steps.steps-run.outputs.steps }}
      filter: |
        fromjson
