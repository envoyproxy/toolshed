inputs:
  append:
    type: boolean
    default: true
  collapse:
    type: boolean
    default: true
  collapse-open:
    type: boolean
    default: false
  column-filter:
    type: string
    default:
  columns:
    type: number
    default: 2
  heading:
    type: string
  title:
    type: string
  show-empty:
    type: boolean
    default: false
  summary:
    type: string
  headers:
    type: string
    default: |
      Variable
      Value
  json:
    type: string
    required: true
  filter:
    default:
  sanitize-filter:
    # Turn everything to string and strings to escaped json
    # with the quotes lopped off, this ensures strings
    # are properly escaped for markdown and cant be used for
    # jq injection attacks
    # making values bold prevents markdown issues with markup
    default: |
      .cell as $cell
      | .row as $row
      | $cell
      | if type == "null" then
          ""
        elif (type == "boolean" or type == "number") then
          "`\(.)`"
        elif (type == "string" and test("\n")) then
          (split("\n")[0] + "..." )
        else . end
      | tojson
      | gsub("\\\\\\("; "\\\\\\(")
      | gsub("\\$"; "<span>$</span>")
      | .[1:-1]
  mutate-cells:
    default: |
      .cell
  output-path:
    type: string

  template-summary:
    type: string
    default: |
      ## \($heading)

      \($content)

  template-table:
    type: string
    default: |
      #### \($title)

      \($table)

outputs:
  table:
    value: ${{ steps.table.outputs.value }}
  summary:
    value: ${{ steps.summary.outputs.value }}


runs:
  using: composite
  steps:
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.33
    name: Generate table
    id: table
    with:
      input: ${{ inputs.json }}
      trim-result: false
      options: -r
      filter: |
        . as $data
        | "${{ inputs.headers }}"
        | split("\n")
        | map(. | str::trim | select(length > 0)) as $headers
        | {data: $data, headers: $headers}
        | gfm::table(${{ inputs.filter || '.' }};
                     ${{ fromJSON(inputs.show-empty) && '.' || '"" | halt_error(0)' }};
                     ${{ inputs.mutate-cells || '.cell' }};
                     ${{ inputs.sanitize-filter || '.' }})

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.33
    id: summary
    if: ${{ steps.table.outputs.value }}
    with:
      input: ${{ toJSON(inputs) }}
      options: -r
      filter: |
        . as $input
        | "${{ steps.table.outputs.value }}" as $table
        | $input.heading as $heading
        | $input.summary as $summary
        | $input.title as $title
        | if $input.collapse then
            $title as $_title
            | $summary as $title
            | "${{ inputs.template-table }}"
            | {title: $_title, content: ., open: ${{ fromJSON(inputs.collapse-open) }}}
            | gfm::collapse
          else
            "${{ inputs.template-table }}"
          end
        | . as $content
        | if $heading != "" then
            "${{ inputs.template-summary }}"
          else . end
      output-path: ${{ inputs.output-path }}
