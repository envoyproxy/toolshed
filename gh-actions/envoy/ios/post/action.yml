inputs:
  app:
    type: string
    required: true
  args:
    type: string
    default: >-
      --config=mobile-remote-ci-macos-ios
  expected:
    type: string
    required: true
  simulator-command:
    type: string
    default: >-
      ./mobile/ci/start_ios_simulator.sh
  simulator-device:
    type: string
    default: iPhone 16 Pro Max
  simulator-version:
    type: string
    default: 18.1
  timeout:
    type: string
    default: 5m


runs:
  using: composite
  steps:
  - name: Start mock server
    run: |
      if [[ ! -f ./ci/start_ios_mock_server.py ]]; then
          echo "WARNING: Mock server script not found, tests may fail!" >&2
          exit 0
      fi
      OUTPUT=$(./ci/start_ios_mock_server.py)
      echo "$OUTPUT"
      MOCK_SERVER_PID=$(echo "$OUTPUT" | tail -1)
      echo "MOCK_SERVER_PID=$MOCK_SERVER_PID" >> $GITHUB_ENV
      echo "MOCK_SERVER_PORT=${MOCK_SERVER_PORT:-10000}" >> $GITHUB_ENV
    shell: bash
    working-directory: mobile
  - name: Run app
    run: |
      echo "Starting app with temporary simulator..."
      ./bazelw run $ARGS $APP \
          --ios_simulator_device="${{ inputs.simulator-device }}" \
          --ios_simulator_version="${{ inputs.simulator-version }}" \
          > /tmp/envoy.log 2>&1 &
      APP_PID=$!
      sleep 3
      if ! ps -p $APP_PID > /dev/null; then
          echo "WARNING: App process exited early. Initial log:" >&2
          head -50 /tmp/envoy.log 2>/dev/null || echo "No log file" >&2
      fi
    shell: bash
    working-directory: mobile
    env:
      ARGS: ${{ inputs.args }}
      APP: ${{ inputs.app }}
  - name: Check connectivity
    shell: bash
    env:
      EXPECTED: ${{ inputs.expected }}
      TIMEOUT: ${{ inputs.timeout }}
    run: |
      checklogs () {
          echo "CHECKING FOR ${EXPECTED} in /tmp/envoy.log"
          sed "/${EXPECTED}/q" <(touch /tmp/envoy.log && tail -F /tmp/envoy.log)
      }
      export -f checklogs
      timeout ${TIMEOUT} bash -c checklogs || {
          retcode=$?
          if [[ "$retcode" == 124 ]]; then
              echo "ERROR: Timed out searching for '${EXPECTED}'" >&2
              echo "Log file size: $(stat -f%z /tmp/envoy.log 2>/dev/null || echo 'N/A')" >&2
              echo "Last 20 lines of log:" >&2
              tail -20 /tmp/envoy.log 2>/dev/null || echo "No log content" >&2
              if [[ -n "${MOCK_SERVER_PID:-}" ]]; then
                  if ps -p $MOCK_SERVER_PID > /dev/null; then
                      echo "Mock server is still running (PID: $MOCK_SERVER_PID)" >&2
                  else
                      echo "ERROR: Mock server died (PID: $MOCK_SERVER_PID)" >&2
                  fi
              fi
              echo "Testing mock server connectivity:" >&2
              curl -v http://127.0.0.1:${MOCK_SERVER_PORT:-10000}/ping 2>&1 | tail -10 || echo "Mock server not responding" >&2
          else
              echo "ERROR: Command to check logs failed" >&2
          fi
          echo "=== Checking for partial matches ===" >&2
          grep -i "status\|headers\|received" /tmp/envoy.log | tail -10 2>/dev/null || echo "No related messages found" >&2
          exit $retcode
      }
  - name: Cleanup mock server
    if: ${{ always() }}
    run: |
      if [[ -n "${MOCK_SERVER_PID:-}" ]]; then
          echo "Stopping mock server (PID: $MOCK_SERVER_PID)"
          kill $MOCK_SERVER_PID 2>/dev/null || :
      fi
    shell: bash
  - run: cat /tmp/envoy.log
    if: ${{ failure() || cancelled() }}
    name: Log app run
    shell: bash
