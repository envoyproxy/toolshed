inputs:
  app:
    type: string
    required: true
  args:
    type: string
    default: >-
      --config=mobile-remote-ci-macos-ios
  expected:
    type: string
    required: true
  simulator-command:
    type: string
    default: >-
      ./mobile/ci/start_ios_simulator.sh
  timeout:
    type: string
    default: 5m


runs:
  using: composite
  steps:
  - uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08
    name: Start simulator
    with:
      timeout_minutes: 5
      max_attempts: 3
      command: ${{ inputs.simulator-command }}
  # Run the app in the background and redirect logs.
  - name: Run app
    run: |
      cd mobile
      ./bazelw run $ARGS $APP &> /tmp/envoy.log &
    shell: bash
    env:
      # TODO: handle these correctly with `read -ra`
      ARGS: ${{ inputs.args }}
      APP: ${{ inputs.app }}
  - run: |
      checklogs () {
          echo "CHECKING FOR ${EXPECTED} in /tmp/envoy.log"
          sed "/${EXPECTED}/q" <(touch /tmp/envoy.log && tail -F /tmp/envoy.log)
      }
      export -f checklogs
      timeout ${TIMEOUT} bash -c checklogs || {
          retcode=$?
          if [[ "$retcode" == 124 ]]; then
              echo "ERROR: Timed out searching for '${EXPECTED}'" >&2
          else
              echo "ERROR: Command to check logs failed" >&2
          fi
          ACTUAL="$(grep "$EXPECTED" /tmp/envoy.log)"
          ls -alh /tmp/envoy.log
          echo "FTR ${ACTUAL} in /tmp/envoy.log"
          exit $retcode
      }
    shell: bash
    env:
      EXPECTED: ${{ inputs.expected }}
      TIMEOUT: ${{ inputs.timeout }}
    name: Check connectivity
  - run: cat /tmp/envoy.log
    if: ${{ failure() || cancelled() }}
    name: Log app run
    shell: bash
