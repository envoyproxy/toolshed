inputs:
  config-file:
    type: string
    default: ./.github/config.yml
  started:
    type: number
    required: true
  token:
    type: string
    required: true
  trusted_bots:
    type: string
    default: |
      trigger-release-envoy[bot]
  vars:
    type: string
    required: true

outputs:
  data:
    value: ${{ steps.data.outputs.value }}


runs:
  using: composite
  steps:
  # Pull request/targets are _never_ trusted.
  #
  # Only specified bots are trusted.
  - id: trusted
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input: |
        ${{ inputs.trusted-bots || 'NOBOTS' }}
      options: -sRc
      input-format: text
      filter: |
        "${{ contains(github.actor, '[bot]') && github.actor || '' }}" as $bot
        | (if $bot == "" then
             true
          else
            (split("\n")
            | index($bot) != null)
          end) as $trusted
        | {trusted: ($trusted and ${{ ! startswith(github.event_name, 'pull_request') }})}

  - uses: envoyproxy/toolshed/gh-actions/github/context@actions-v0.1.64
    name: Github context
    if: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}

  - id: ref-name
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input: "${{ github.ref_name }}"
      input-format: text
      options: -rR
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
      filter: |
        sub("^refs/pull/"; "")
        | sub("^refs/heads/"; "")

  - uses: envoyproxy/toolshed/gh-actions/shout@actions-v0.1.64
    id: config-current-text
    with:
      sh: >-
        git
        show
        origin/${{ steps.ref-name.outputs.value }}:${{ inputs.config-file }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    name: Current config
    id: config
    with:
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
      input-format: yaml
      input: ${{ steps.config-current-text.outputs.out }}
  - uses: envoyproxy/toolshed/gh-actions/github/merge-commit@actions-v0.1.64
    id: merge-commit
    if: ${{ startswith(github.event_name, 'pull_request') }}
    with:
      repository: ${{ github.repository }}
      pr: ${{ github.event.number }}
      token: ${{ inputs.token }}

  ## WARNING: THIS IS A REQUEST ATTACK VECTOR
  # The body of the commit message has any suspect strings - eg `${{` or `%{{`
  #  interpolated out.
  # When interpolating back the message it cannot be used in any `using/steps`
  #  or related actions (eg foreach) - in those cases it should be safe to interpolate
  #  back in the generated steps, but *the interpolated data should never be passed to the
  #  step generation*
  - id: commit-message
    name: Get commit message from the github context
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input: |
        ${{ toJSON(github) }}
      filter: |
        .event.head_commit.message // .event.pull_request.title + "\n" + .event.pull_request.body
  - run: |
      VERSION=$(cat VERSION.txt)
      echo "string=$VERSION" >> $GITHUB_OUTPUT
    id: version-string
    shell: bash
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    name: Validate given version string
    with:
      input-format: string
      options: -R
      input: ${{ steps.version-string.outputs.string }}
      filter: |
        . as $version
        | test("^[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?\\+?[0-9A-Za-z-]*$")
          or error("Version string does not meet expectations")
        | $version
  - uses: envoyproxy/toolshed/gh-actions/shout@actions-v0.1.64
    id: diff
    with:
      sh: >-
        git
        diff
        --name-only
        ${{ steps.merge-commit.outputs.sha || 'HEAD^1' }}
        origin/${{ steps.ref-name.outputs.value }}
  - id: changed
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      options: -Rsc
      input-format: text
      input: ${{ steps.diff.outputs.out }}
      filter: |
        split("\n")
  - id: version
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input: ${{ steps.changed.outputs.value || '[]' }}
      filter: |
        (index("VERSION.txt") != null) as $changed
        | "${{ steps.version-string.outputs.string }}"
        | endswith("-dev") as $isdev
        | split(".")
        | {major: (.[0] | fromjson),
           minor: (.[1] | fromjson),
           patch: (.[2] | rtrimstr("-dev") | fromjson),
           "dev": $isdev,
           "changed": $changed}
  - uses: envoyproxy/toolshed/gh-actions/shout@actions-v0.1.64
    id: version-current-string
    with:
      sh: >-
        git
        show
        origin/${{ steps.ref-name.outputs.value }}:VERSION.txt
  - id: version-current
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input: "{}"
      options: -Rsc
      filter: |
        "${{ steps.version-current-string.outputs.out }}"
        | endswith("-dev") as $isdev
        | split(".")
        | {major: (.[0] | fromjson),
           minor: (.[1] | fromjson),
           patch: (.[2] | rtrimstr("-dev") | fromjson),
           "dev": $isdev}

  - id: build-images
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input-format: yaml
      input: |
        default: ${{ fromJSON(steps.config.outputs.value).build-image.repo }}:${{ fromJSON(steps.config.outputs.value).build-image.tag }}@sha256:${{ fromJSON(steps.config.outputs.value).build-image.sha }}
        mobile: ${{ fromJSON(steps.config.outputs.value).build-image.repo }}:mobile-${{ fromJSON(steps.config.outputs.value).build-image.tag }}@sha256:${{ fromJSON(steps.config.outputs.value).build-image.mobile-sha }}

  - id: requested-build-images
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input-format: yaml-path
      input: ${{ inputs.config-file }}
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
      filter: |
        .["build-image"].repo as $repo
        | (.["build-image"].tag | . as $r | test("^[0-9a-fA-F]{40}$") or error("tag is not 40-char sha") | $r) as $tag
        | (.["build-image"].sha | . as $r | test("^[0-9a-fA-F]{64}$") or error("sha is not 64-char sha") | $r) as $sha
        | (.["build-image"]["mobile-sha"] | . as $r | test("^[0-9a-fA-F]{64}$") or error("mobile-sha is not 64-char sha") | $r) as $mobileSha
        | {"build-image": "\($repo):\($tag)@sha256:\($sha)",
           "build-image-mobile": "\($repo):mobile-\($tag)@sha256:\($mobileSha)"}

  - id: base-request
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input-format: yaml
      input: |
        message: ${{ steps.commit-message.outputs.value }}
        started: ${{ inputs.started }}
        target-branch: ${{ steps.ref-name.outputs.value }}
        trusted: ${{ fromJSON(steps.trusted.outputs.value).trusted }}
        version: ${{ steps.version.outputs.value }}
        version-current: ${{ steps.version-current.outputs.value }}
        build-image: ${{ steps.requested-build-images.outputs.value }}
        build-image-current: ${{ steps.build-images.outputs.value }}
  - id: pr-request
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    if: ${{ startswith(github.event_name, 'pull_request') }}
    with:
      input-format: yaml
      input: |
        base-sha: ${{ github.sha }}
        pr: ${{ github.event.number }}
        ref: ${{ steps.merge-commit.outputs.sha }}
        sha: ${{ github.event.pull_request.head.sha || github.sha }}
      filter: |
        . * ${{ steps.base-request.outputs.value }}
  - id: push-request
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    if: ${{ ! startswith(github.event_name, 'pull_request') }}
    with:
      input-format: yaml
      input: |
        ref: ${{ steps.context.outputs.repo_ref || '' }}
        sha: ${{ github.sha }}
        started: ${{ inputs.started }}
      filter: |
        . * ${{ steps.base-request.outputs.value }}

  - name: Run config
    id: run-config
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input-format: yaml
      input: ${{ toJSON(fromJSON(steps.config.outputs.value).run) }}
  - uses: envoyproxy/toolshed/gh-actions/torun@actions-v0.1.64
    id: torun
    with:
      branch: ${{ steps.ref-name.outputs.value }}
      event: ${{ github.event_name }}
      config: ${{ steps.run-config.outputs.value }}
      paths: ${{ startswith(github.event_name, 'pull_request') && steps.changed.outputs.value || '[]' }}

  # CI is only enabled if its the Envoy repo or specifically enabled in config
  - name: Check CI vars
    id: ci-vars
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    with:
      input-format: yaml
      input: |
        ci: ${{ github.repository == 'envoyproxy/envoy' || fromJSON(inputs.vars).ENVOY_CI }}
        ci-mobile: ${{ github.repository == 'envoyproxy/envoy' || fromJSON(inputs.vars).ENVOY_MOBILE_CI }}
        ci-windows: ${{ github.repository == 'envoyproxy/envoy' || fromJSON(inputs.vars).ENVOY_WINDOWS_CI }}
        ci-macos: ${{ github.repository == 'envoyproxy/envoy' || fromJSON(inputs.vars).ENVOY_MACOS_CI }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    name: Generate env json
    id: repo-run
    with:
      input: ${{ steps.torun.outputs.runs }}
      filter: >-
        .
        ${{ !fromJSON(steps.ci-vars.outputs.value).ci-mobile
            && '| with_entries(if .key | test("^mobile-") then .value = false else . end)'
            || '' }}
        ${{ !fromJSON(steps.ci-vars.outputs.value).ci-windows
            && '| with_entries(if .key | test("^build-windows") then .value = false else . end)'
            || '' }}
        ${{ !fromJSON(steps.ci-vars.outputs.value).ci-macos
            && '| with_entries(if .key | test("^build-macos") then .value = false else . end)'
            || '' }}
  # This allows you to set eg ENVOY_CI_RUN_MOBILE_COVERAGE and force `mobile-coverage` to `true`
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    id: run-filter
    with:
     input: ${{ inputs.vars }}
     options: -r
     filter: >-
       to_entries
       | map(select(.key
           | startswith("ENVOY_CI_RUN")))
       | map(.key as $k
           | .value == "1"
           | if . then ".[\""
                          + ($k | sub("ENVOY_CI_RUN_"; "")
                                | gsub("_"; "-")
                                | ascii_downcase) + "\"] = true"
             else empty end)
       | join(" | ")
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    name: Enable custom CI
    id: run
    with:
      input: ${{ steps.repo-run.outputs.value }}
      filter: >-
        ${{ steps.run-filter.outputs.value || '.' }}
        | walk(if . == "" then false else . end)

  # Any checks that are required but are not scheduled to be run
  # are explicitly skipped
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    name: Checks config
    id: checks-config
    with:
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
      input: ${{ steps.config.outputs.value }}
      filter: >-
        .checks as $checks
        | ${{ steps.run.outputs.value }} as $run
        | $checks
        | with_entries(
            .key as $k
            | .value as $v
            | $v["on-run"] as $reqs
            | (any(($reqs // [])[]; $run[.])) as $dorun
            | select($dorun or $v.required)
            | del(.value["on-run"], .value.required)
            | .value.id = $k
            | if $dorun then
                (.value.action = "RUN")
              else
                (.value.action = "SKIP")
              end)
        | to_entries
        | sort_by(.key)
        | sort_by(.value.action)
        | from_entries

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.1.64
    name: Create data
    id: data
    with:
      input: |
        {"request": ${{ steps.pr-request.outputs.value || steps.push-request.outputs.value }},
         "run": ${{ steps.run.outputs.value }},
         "ci": {"agent-ubuntu": "${{ fromJSON(steps.config.outputs.value).agent-ubuntu }}"},
         "checks": ${{ steps.checks-config.outputs.value }},
         "config": ${{ steps.config.outputs.value }}}
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
