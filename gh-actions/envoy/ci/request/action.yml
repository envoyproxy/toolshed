#
# Rough schema for generated data:
#
# config: {ci, tables, envoy}
# run: {run: boolean}
# request: {...request-vars, version, version-current, build-image, build-image-current}
# checks: {check: {name, advice, id, action}}
#
#
# CI is only enabled if its the Envoy repo or specifically enabled by vars.ENVOY_CI
#
# Checks/runs are enabled/disabled by .github/config.yml
#
# Check/runs can be overridden with vars, eg ENVOY_CI_RUN_MOBILE_COVERAGE=1 will force `mobile-coverage` to `true`
#
# Any *required* checks that are not scheduled to be run are explicitly skipped

inputs:
  branch-name:
    type: string
    required: true
  config-file:
    type: string
    default: ./.github/config.yml
  merge-commit:
    type: string
    default:
  started:
    type: number
    required: true
  token:
    type: string
    required: true
  trusted_bots:
    type: string
    default: |
      trigger-release-envoy[bot]
  template-script-ref-file:
    type: string
    default: |
      git fetch \($remote) \($ref)
      OUTPUT=\"$(git show \($remote)/\($ref):\($filename))\"
  template-script-diff:
    type: string
    default: |
      git fetch \($remote) \($ref)
      OUTPUT=\"$(git diff --name-only \($diff) \($remote)/\($ref))\"
  vars:
    type: string
    required: true
  version-file:
    type: string
    default: VERSION.txt

outputs:
  data:
    value: ${{ steps.data.outputs.value }}


runs:
  using: composite
  steps:
  ## WARNING: INCOMING USER DATA IS A REQUEST ATTACK VECTOR AND SHOULD BE HANDLED ACCORDINGLY

  # Pull request/targets are _never_ trusted.
  #
  # Only specified bots are trusted.
  - id: trusted
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.37
    with:
      input: |
        trusted_bots: |
          ${{ inputs.trusted-bots || 'NOBOTS' }}
        bot: ${{ contains(github.actor, '[bot]') && github.actor || '' }}
        event_name: ${{ github.event_name }}
      input-format: yaml
      filter: |
        . as $input
        | if ($input.bot | str::isempty | not) then
            .trusted_bots
            | split("\n")
            | index($input.bot) != null
          else true end
        | (. and ($input.event_name | startswith("pull_request") | not))

  # Check requested changes
  - uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.37
    id: changed
    with:
      title: git diff changes from ${{ inputs.merge-commit || 'HEAD^1' }}
      input: |
        diff: ${{ inputs.merge-commit || 'HEAD^1' }}
        remote: origin
        ref: ${{ inputs.branch-name }}
      input-format: yaml
      filter: |
        .diff as $diff
        | .remote as $remote
        | .ref as $ref
        | ("${{ inputs.template-script-diff }}" | bash::output)
      result-filter: |
        rtrimstr("\n")
        | split("\n")

  # Check current/requested config (currently only build-images can be overridden)
  - uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.37
    id: config
    with:
      title: fetch ${{ inputs.branch-name }}:${{ inputs.config-file }}
      input: |
        filename: ${{ inputs.config-file }}
        branch: ${{ inputs.branch-name }}
        remote: origin
      filter: |
        .filename as $filename
        | .remote as $remote
        | .branch as $ref
        | ("${{ inputs.template-script-ref-file }}" | bash::output)
      result-format: yaml
      result-filter-options:
      result-filter: .

  - id: build-images
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.37
    with:
      input-format: yaml-path
      input: ${{ inputs.config-file }}
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
      filter: |
        .["build-image"].repo as $repo
        | (.["build-image"].tag | validate::sha(40)) as $tag
        | (.["build-image"].sha | validate::sha(64)) as $sha
        | (.["build-image"]["mobile-sha"] | validate::sha(64)) as $mobileSha
        | {"default": "\($repo):\($tag)@sha256:\($sha)",
           "mobile": "\($repo):mobile-\($tag)@sha256:\($mobileSha)"}
        | . as $requested
        | ${{ steps.config.outputs.output }}
        | .["build-image"].repo as $repo
        | .["build-image"].tag as $tag
        | .["build-image"].sha as $sha
        | .["build-image"]["mobile-sha"] as $mobileSha
        | {default: "\($repo):\($tag)@sha256:\($sha)",
           mobile: "\($repo)::mobile-\($tag)@sha256:\($mobileSha)"}
        | {$requested, current: .}

  # Check current/request versions
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.37
    name: Validate given version string
    id: version-string
    with:
      input-format: string-path
      options: -Rr
      input: VERSION.txt
      filter: |
        validate::version
  - uses: envoyproxy/toolshed/gh-actions/bson@actions-v0.2.37
    id: version
    with:
      title: fetch ${{ inputs.branch-name }}:${{ inputs.version-file }}
      filter: |
        "${{ inputs.version-file }}" as $filename
        | "${{ inputs.branch-name }}" as $ref
        | "origin" as $remote
        | ("${{ inputs.template-script-ref-file }}" | bash::output)
      result-filter: |
        .
        | endswith("-dev") as $isdev
        | split(".")
        | {major: (.[0] | fromjson),
           minor: (.[1] | fromjson),
           patch: (.[2] | rtrimstr("-dev") | fromjson),
           "dev": $isdev}
        | . as $current
        | ${{ steps.changed.outputs.output || '[]' }}
        | (index("VERSION.txt") != null) as $changed
        | "${{ steps.version-string.outputs.value }}"
        | endswith("-dev") as $isdev
        | split(".")
        | {major: (.[0] | fromjson),
           minor: (.[1] | fromjson),
           patch: (.[2] | rtrimstr("-dev") | fromjson),
           "dev": $isdev,
           "changed": $changed}
        | {requested: ., current: $current}

  - id: request
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.37
    with:
      input: |
        actor: ${{ toJSON(github.actor) }}
        event: ${{ toJSON(github.event) }}
        event_name: ${{ github.event_name }}
        sha: ${{ github.sha }}
        build_images: ${{ steps.build-images.outputs.value }}
      input-format: yaml
      filter: |
        .
        | .actor as $actor
        | .event as $event
        | .event_name as $event_name
        | .sha as $sha
        | .build_images as $build_images
        | ($event.head_commit.message
           // "\($event.pull_request.title)\n\($event.pull_request.body)") as $message
        | ($build_images.current.default != $build_images.requested.default) as $build_image_changed
        | $build_images.requested
        | if $build_image_changed then
            .changed = true
          else . end
        | . as $build_image
        | {}
        | if ($event_name | startswith("pull_request")) then
            .ref = "${{ inputs.merge-commit }}"
            | .sha = $event.pull_request.head.sha
            | .pr = $event.number
            | .["base-sha"] = $sha
          else
            .ref = "${{ inputs.branch-name }}"
            | .sha = $sha
          end
        | . * {"actor": {
                 name: $actor,
                 icon: $event.sender.avatar_url},
               "message": $message,
               "started": ${{ inputs.started }},
               "target-branch": "${{ inputs.branch-name }}",
               "trusted": ${{ steps.trusted.outputs.value }},
               "version": ${{ toJSON(fromJSON(steps.version.outputs.output).requested) }},
               "version-current": ${{ toJSON(fromJSON(steps.version.outputs.output).current) }},
               "build-image": $build_image,
               "build-image-current": $build_images.current}

  - name: Run config
    id: run-config
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.37
    with:
      input-format: yaml
      input: ${{ toJSON(fromJSON(steps.config.outputs.output).run) }}
  - uses: envoyproxy/toolshed/gh-actions/torun@actions-v0.2.37
    id: torun
    with:
      event: ${{ github.event_name }}
      config: ${{ steps.run-config.outputs.value }}
      paths: ${{ steps.changed.outputs.output || '[]' }}

  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.2.37
    name: Create data
    id: data
    with:
      input: ${{ inputs.vars }}
      filter: |
        ${{ steps.torun.outputs.runs }} as $runs
        | ${{ github.repository == 'envoyproxy/envoy' }} as $isEnvoyRepo
        | . as $vars
        | ($isEnvoyRepo or $vars.ENVOY_CI) as $ci
        | ($isEnvoyRepo or $vars.ENVOY_MOBILE_CI) as $ciMobile
        | ($isEnvoyRepo or $vars.ENVOY_WINDOWS_CI) as $ciWindows
        | ($isEnvoyRepo or $vars.ENVOY_MACOS_CI) as $ciMacos
        | $runs
        | with_entries(
            ((.key | test("^mobile-") and ($ciMobile | not))
            or ((.key | test("^build-windows")) and ($ciWindows | not))
            or ((.key | test("^build-macos")) and ($ciMacos | not))) as $disable
            | (.key | gsub("-"; "_") | ascii_upcase) as $keyVar
            | "ENVOY_CI_RUN_\($keyVar)" as $envVar
            | ($vars | has($envVar)) as $enable
            | if $enable then
                .value = true
              elif $disable then
                .value = false
              elif .value == "" then
                .value = false
              else . end)
        | . as $run
        | ${{ steps.config.outputs.output }} as $config
        | $config.checks as $checks
        | $checks
        | with_entries(
            .key as $k
            | .value as $v
            | $v["on-run"] as $reqs
            | (any(($reqs // [])[]; $run[.])) as $dorun
            | select($dorun or $v.required)
            | del(.value["on-run"], .value.required)
            | .value.id = $k
            | if $dorun then
                (.value.action = "RUN")
              else
                (.value.action = "SKIP")
              end)
        | to_entries
        | sort_by(.value.action, .key)
        | from_entries as $checks
        | ${{ steps.request.outputs.value }} as $request
        | ($config
           | del(.checks, .config, .run, .["build-image"], .["agent-ubuntu"])
           | .envoy = $config.config.envoy
           | .ci = {
               "agent-ubuntu": $config["agent-ubuntu"],
               "build-image": $config["build-image"]}) as $config
        | {$config, $checks, $request, $run}
      print-result: ${{ fromJSON(env.CI_DEBUG || 'false') && true || false }}
