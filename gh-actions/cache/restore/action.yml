inputs:
  key:
    type: string
    required: true

  command:
    type: string
    default:
  owner:
    type: string
    default: runner:docker
  path:
    type: string
    default:
  path-script:
    type: string
    default: /tmp/cachescript
  path-tmp:
    type: string
    default: /tmp/cache
  run-as-sudo:
    type: boolean
    default: false
  mount-tmpfs:
    type: boolean
    default: false

runs:
  using: "composite"
  steps:
  - run: |
      if [[ "${{ inputs.run-as-sudo }}" == 'true' ]]; then
          sudo mkdir -p ${{ inputs.path || inputs.path-tmp }}
          if [[ -n "${{ inputs.owner }}" ]]; then
              sudo chown -R ${{ inputs.owner }} ${{ inputs.path || inputs.path-tmp }}
          fi
      else
          mkdir -p ${{ inputs.path || inputs.path-tmp }}
      fi
      if [[ "${{ inputs.mount-tmpfs }}" == 'true' ]]; then
          sudo mount -t tmpfs none ${{ inputs.path || inputs.path-tmp }}
      fi
    shell: bash
  - name: Restore cache
    id: cache-restore
    uses: actions/cache/restore@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4.1.2
    with:
      path: ${{ inputs.path || inputs.path-tmp }}
      key: ${{ inputs.key }}
  - run: |
      # Create cache script
      cat <<'EOF' >> "${{ inputs.path-script }}"
      #!/bin/bash -e

      set -o pipefail

      ${{ inputs.command }}
      EOF
      chmod +x "${{ inputs.path-script }}"
    shell: bash
    if: ${{ inputs.command }}
  - run: |
      cd ${{ inputs.path || inputs.path-tmp }} || exit 1
      if [[ "${{ inputs.run-as-sudo }}" == 'true' ]]; then
          sudo "${{ inputs.path-script }}"
      else
          "${{ inputs.path-script }}"
      fi
      cd - || exit 1
    shell: bash
    if: ${{ inputs.command }}

  - run: |
      if [[ "${{ inputs.mount-tmpfs }}" == 'true' ]]; then
          sudo umount ${{ inputs.path-tmp }}
      fi
      sudo rm -rf ${{ inputs.path-tmp }}
    if: ${{ ! inputs.path }}
    shell: bash
