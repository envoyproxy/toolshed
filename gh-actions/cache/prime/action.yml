
inputs:
  command:
    type: string
    required: true
  key:
    type: string
    required: true

  owner:
    type: string
    default: runner:docker
  path_tmp:
    type: string
    default: /tmp/cache
  path_script:
    type: string
    default: /tmp/cachescript
  run_as_sudo:
    type: boolean
    default: true
  mount_tmpfs:
    type: boolean
    default: true

outputs:
  cached:
    value: ${{ steps.cache-restore.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
  - run: |
      sudo mkdir -p ${{ inputs.path_tmp }}
    shell: bash

  - name: Check cache
    id: cache-restore
    uses: actions/cache/restore@v3
    with:
      lookup-only: true
      path: ${{ inputs.path_tmp }}
      key: ${{ inputs.key }}

  - if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
    run: |
      if [[ "${{ inputs.mount_tmpfs }}" == 'true' ]]; then
          sudo mount -t tmpfs none ${{ inputs.path_tmp }}
      fi
      echo "#!/bin/bash -e" > "${{ inputs.path_script }}"
      chmod +x "${{ inputs.path_script }}"
      echo "${{ inputs.command }}" >> "${{ inputs.path_script }}"
      cd ${{ inputs.path_tmp }} || exit 1
      if [[ "${{ inputs.run_as_sudo }}" == 'true' ]]; then
          sudo "${{ inputs.path_script }}"
      else
          "${{ inputs.path_script }}"
      fi
      sudo chown -R  "${{ inputs.owner }}" "${{ inputs.path_tmp }}"
      cd - || exit 1
    shell: bash

  - name: Save cache
    if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
    uses: actions/cache/save@v3
    with:
      path: ${{ inputs.path_tmp }}
      key: ${{ inputs.key }}

  - if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
    run: |
      if [[ "${{ inputs.mount_tmpfs }}" == 'true' ]]; then
          sudo umount ${{ inputs.path_tmp }}
      fi
      sudo rm -rf ${{ inputs.path_tmp }}
      sudo rm -rf ${{ inputs.path_script }}
    shell: bash
