inputs:
  change-directory:
    type: boolean
    default: true
  command:
    type: string
    required: true
  key:
    type: string
    required: true
  lock-id:
    type: string
  lock-repository:
    type: string
    default: ${{ github.repository }}
  lock-token:
    type: string
  owner:
    type: string
    default: runner:docker
  path:
    type: string
    default:
  path_tmp:
    type: string
    default: /tmp/cache
  path_script:
    type: string
    default: /tmp/cachescript
  mount-tmpfs:
    type: boolean
    default: true
  run-as-sudo:
    type: boolean
    default: true

outputs:
  cached:
    value: ${{ steps.cache-restore.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
  - run: |
      # Create cache path (if non-existent)
      if [[ "${{ inputs.run-as-sudo }}" == 'true' ]]; then
          sudo mkdir -p ${{ inputs.path || inputs.path_tmp }}
      else
          mkdir -p ${{ inputs.path || inputs.path_tmp }}
      fi
    shell: bash
  - name: Check cache
    id: cache-restore-initial
    uses: actions/cache/restore@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4.1.2
    with:
      lookup-only: true
      path: ${{ inputs.path || inputs.path_tmp }}
      key: ${{ inputs.key }}
  - uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.1
    if: ${{ ! inputs.lock-id && steps.cache-restore-initial.outputs.cache-hit != 'true' }}
    id: lock-id
    with:
      input: ${{ inputs.key }}
      options: -Rr
      filter: |
        @base64
  - uses: envoyproxy/toolshed/gh-actions/github/mutex@actions-v0.3.1
    if: ${{ inputs.lock-token && steps.cache-restore-initial.outputs.cache-hit != 'true' }}
    with:
      key: ${{ inputs.lock-id || steps.lock-id.outputs.value }}
      repository: ${{ inputs.lock-repository }}
      token: ${{ inputs.lock-token }}
  - name: Check cache
    id: cache-restore
    if: ${{ inputs.lock-token && steps.cache-restore-initial.outputs.cache-hit != 'true' }}
    uses: actions/cache/restore@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4.1.2
    with:
      lookup-only: true
      path: ${{ inputs.path || inputs.path_tmp }}
      key: ${{ inputs.key }}
  - if: ${{ steps.cache-restore-initial.outputs.cache-hit != 'true' && steps.cache-restore.outputs.cache-hit != 'true' }}
    name: Create cache
    id: restore
    run: |
      # Create cache
      if [[ "${{ inputs.mount-tmpfs }}" == 'true' ]]; then
          sudo mount -t tmpfs none ${{ inputs.path || inputs.path_tmp }}
      fi
      if [[ "${{ inputs.change-directory }}" == 'true' ]]; then
          cd ${{ inputs.path || inputs.path_tmp }} || exit 1
      fi
      echo "#!/bin/bash -e" > "${{ inputs.path_script }}"
      chmod +x "${{ inputs.path_script }}"
      echo "${{ inputs.command }}" >> "${{ inputs.path_script }}"

      if [[ "${{ inputs.run-as-sudo }}" == 'true' ]]; then
          sudo "${{ inputs.path_script }}"
          if [[ -n "${{ inputs.owner }}" ]]; then
              sudo chown -R  "${{ inputs.owner }}" "${{ inputs.path || inputs.path_tmp }}"
          fi
      else
          "${{ inputs.path_script }}"
      fi
      echo "save=true" >> $GITHUB_OUTPUT
      if [[ "${{ inputs.change-directory }}" == 'true' ]]; then
          cd - || exit 1
      fi
    shell: bash
    env:
      CACHE_PATH: ${{ inputs.path || inputs.path_tmp }}

  - if: ${{ steps.restore.outputs.save == 'true' }}
    name: Save cache
    uses: actions/cache/save@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4.1.2
    with:
      path: ${{ inputs.path || inputs.path_tmp }}
      key: ${{ inputs.key }}

  - if: ${{ steps.restore.outputs.save == 'true' && ! inputs.path }}
    run: |
      # Remove temporary files
      if [[ "${{ inputs.mount-tmpfs }}" == 'true' ]]; then
          sudo umount ${{ inputs.path_tmp }}
      fi
      sudo rm -rf ${{ inputs.path_tmp }}
      sudo rm -rf ${{ inputs.path_script }}
    shell: bash
