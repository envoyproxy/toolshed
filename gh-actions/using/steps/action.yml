
inputs:
  steps:
    type: string
    required: true
  isolated:
    type: boolean
    default: false
  name:
    default:
  context:
    type: string
  step-format:
    type: string
    default: yaml

outputs:
  steps:
    value: ${{ steps.steps.outputs.steps && toJSON(steps.steps.outputs.steps) || '' }}


runs:
  using: composite
  steps:
  - id: create-steps
    shell: bash
    # This allows latebinding using `%{{ }}`
    # For example, to use output from a previous step you can use
    # %{{ steps.stepname.outputs }}
    run: |
      ACTION_PATH='${{ github.action_path }}'
      if [[ ${{ runner.os  }} == "Windows" ]]; then
          ACTION_PATH=$(echo $ACTION_PATH | tr '/' '\\')
      fi
      "${ACTION_PATH}/create-steps.sh" "${ACTION_PATH}/${TEMPLATE}"
    env:
      FORMAT: ${{ inputs.step-format || 'yaml' }}
      STEPS: ${{ inputs.steps }}
      TEMPLATE: ${{ !fromJSON(inputs.isolated) && 'steps.yml' || 'isolated-steps.yml' }}
  - run: |
      cat .tmp.action/action.yml
    shell: bash
    # if: ${{ env.CI_DEBUG || env.RUNNER_DEBUG }}
  - name: Run (${{ inputs.name || '.tmp.action' }})
    uses: ./.tmp.action
    id: steps
    with:
      context: ${{ !fromJSON(inputs.isolated) && inputs.context || '' }}
  - name: Cleanup (.tmp.action)
    if: always()
    shell: bash
    run: rm -rf .tmp.action
